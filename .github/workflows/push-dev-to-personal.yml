# Unique name for this workflow
name: Deploy PR to Personal org

# Definition when the workflow should run
on:
    push:
      branches: [ dev ]
      paths:
        - 'force-app/**'

env:
    SECRETS_CONTEXT: ${{ toJson(secrets) }}
            

# Jobs to be executed
jobs:
    create_matrix:
        runs-on: ubuntu-latest
        outputs:
          secrets_matrix: ${{ steps.create_matrix.outputs.secrets_matrix }}

        steps:
        - name: Set up Git repository
          uses: actions/checkout@v2

        - name: Create Secret Matrix
          id: create_matrix
          run: |
              SECRETS_CONTEXT=$SECRETS_CONTEXT
              SECRETS_MATRIX='['
              for secret in $(echo $SECRETS_CONTEXT | jq -r 'to_entries[] | select(.key | endswith("_PERSONAL")) | .key'); do
                SECRETS_MATRIX="${SECRETS_MATRIX}\"${secret}\","
              done
              SECRETS_MATRIX="${SECRETS_MATRIX%,}"

              echo "::set-output name=secrets_matrix::[$SECRETS_MATRIX]"
          shell: bash

    deploy-branch-to-personal-orgs:
        needs: create_matrix
        runs-on: ubuntu-latest
        strategy:
            matrix: 
                org: ${{fromJson(needs.create_matrix.outputs.secrets_matrix)}}
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            - name: Use Secret
              run: |
                  echo "Using secret ${{ matrix.org }}"
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version
            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
            # Read pr body
            - name: 'Read PR Body'
              env:

                PR_BODY: ${{github.event.pull_request.body}}

              run: |
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt)       
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

            # Store secret for both otgs
            - name: 'Populate auth file with SFDX_URL secret of the dev and qa orgs'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_DEV_URL}} > ./SFDX_DEV_URL.txt
            
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/
            # Authenticate to org
            - name: 'Authenticate to Dev Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_DEV_URL.txt -s -a development

            - name: 'Check-only deploy delta changes - run specified tests'
              if: ${{ env.APEX_TESTS != 'all' }}
              run: |
                  echo ${{env.APEX_TESTS}}
                  sfdx force:source:deploy -x "changed-sources/package/package.xml" --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json
            # If the env variable equals all, we run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              if: ${{ env.APEX_TESTS == 'all' }}
              run: |
                  sfdx force:source:deploy -x "changed-sources/package/package.xml" --testlevel RunLocalTests  --json
            - name: 'Deploy destructive changes (if any)'
              run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings 